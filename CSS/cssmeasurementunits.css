html {
    /*62.5% of 16px = 10px*/
    font-size: 62.5%;
}

/*CSS VALUES AND UNITS
color: red;
color: rgb(255, 0, 0)
font-size: 10px;
font-size: 1rem;

NUMERIC VALUES
width: 80%
height: 10em;
border-width: 5px;
animation-iteration-count: 5;*/

/*length data type is used to specify sizing with 2 types of units: absolute and relative <length> units.
MEASUREMENT UNITS are divided into 2
What unit you use depends on the problem you are trying to solve.
1. Absolute units - are always fixed, values dont change; e.g., px.
fixed unit, always the same size.
Not affected by values in related elements.
pc, pt, in, cm, mm are mainly used in printing, have no application in web.
pixels don't scale as the items around them scale, or if the user stylesheets has larger sizes on it.

2. Relative units are relative to something else; a unit whose value is dependent on something else; relational sizing, not fixed.
Dependent upon values declared in parent and ancestor elements.
One can create more scalable layouts with relative units; can adjust to different screen sizes.
%; relative to the size of the parent element/container/value; e.g., a width of 50% would be half the size of the parent element's width.
vw,vh; relative to the size(width/ height) of the viewport; e.g., 50vw would be half of the width of the viewport.
em, rem; relative to font size, relative to root element font size which is the HTML tag.

ch unit is the number of characters on a line, 
It is relative to the width of the "0" character in the current element's font; which essentially allows us to make widths based on the number of characters in the paragragh.
This can be useful to prevent paragraphs from spanning more than ~70 characters in width, which can become hard to read.


WIDTH AND HEIGHT properties change the size of the content box. Inline elements require the display property.
Often % unit used - % to be relative to parent
vw/vh to be relative to viewport
ch for paragraph widths
rem for closer to absolute values.
px as a last resort for true absolutes.
vmin and vmax: equal to the smaller/ larger of vw and vh.

MARGIN AND PADDING
rem for closer to absolute values; represents font-size of root element
em to scale with font size; represents inherited font-size of element
px for small values e.g., 10px padding, last resort.

BORDERS, SHADOWS
px for small values
rem/em okay here too; scaling doesn't always look great.

FONT SIZE
rem usually best
em to scale to parent size
px as a last resort

/*Size of the box is always the same no matter how big the screen is;
verify by resizing browser window.
pixel value maintains size of box, border on different screen sizes*/

/*Body is block-level element; and by default the width of the block-level elements is 100%;
that is why they stretch to take up the entire available horizontal space.*/


/*UNITLESS VALUES
Some numeric values do not require a unit.
line-height: 1.25;
margin" 0px 2px;
margin: 0 2px;

Keywords do not require a unit.
color: red;
font-size: medium;
font-weight: bold;

CSS FUNCTION VALUES
The syntax aleays includes the function name and parenthesis

Rotate an element
transform: rotate(90deg);

Calculate a computed value
width: calc(80% - 20px);

Embed an image to the background of an element
background-image: url('myimage.png');

INITIAL VALUE; default browser styles; usually in user agent stylesheets
h1 {
font-weight: bold;
}
*/


/*body{
    margin: 10px;
    width: 300px;
}*/

.box {
    width: 100px;
    height: 100px;
    background-color: gold;
    border-top: 3px solid orange;
}



.box-one {
    width: 50%; /*50% of the width of the parent element; here the parent element is the body element; 
    150px will be the width of box element if the body element has a width of 300px.
    If not set; it's usually at
    Our box gets resized if you resize the browser window*/
    height: 100px; 
    background-color: gold;
    border-top: 3px solid orange;
}

/* USE OF VIEWPORT units allows us to size our elements according to the width or height of the viewport;
By default, the width of block-level elements is 100% and the height is 0.
Use of vh allows the box to take up the entire available vertical space.

.box {
    width: 50vw; 50% of the width of the viewport
    height: 100vh; 100% of the height of the viewport
    background-color: gold;
    border-top: 3px solid orange;
}*/


/* USE OF em and rem when you want to adjust the layout according to the font size.
e.g., If the font becomes bigger, you want the width to increase as well.
If the box element lacks a font size, it's going to inherit font size property from its parent element which is the body element.
The body element lacks a font-size property so it's going to inherit font-size property of HTML element which is 16px.
Problem with em unit is that if you don't have an explicit font size on the element, you have to trace up the inheritance hierarchy to figure out what font size will be applied to this element.
Sometimes, it can get complicated, that's why we have rem

rem; font size of root element by default is 16px.
If you set the width to 15rem, that means 15 * 16 which the calculation is going to be complex.
Thus a cool trick is to define a rule for the HTML element then set its font size to 62.5% which is 62.5% * 16px = 10px;
So whenever we see a value like 15rem, we assume it is 150px.

.box {
    width: 10em; means 10x the font size of the current element; 10 * 16px = 160px.
    width: 10rem; means 10x the font size of the root element; 10 * 16px = 160px.
    height: 100vh; 100% of the height of the viewport
    background-color: gold;
    border-top: 3px solid orange;
}

What unit you use depends on the problem you are trying to solve.
We used px to have a fixed size border.
we used vh so our box takes entire available space vertically.
We used rem so width of the box adjusts based on default font-size*/